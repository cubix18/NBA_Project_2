/*
Dodatkowe kolumny:
- IS_VALID - czy wiersz jest potrzebny?
- LOAD_DATE - data załadowania
- SOURCE_SYSTEM - system źródłowy
*/

SELECT --PERSON_ID, 
    INITCAP(TRIM(FIRST_NAME)) AS PLAYER_FIRST_NAME
    , INITCAP(TRIM(LAST_NAME)) AS PLAYER_LAST_NAME
    , INITCAP(TRIM(DISPLAY_FIRST_LAST)) AS PLAYER_FULL_NAME
    , TO_DATE(BIRTHDATE) AS PLAYER_BIRTH_DATE
    , COALESCE(SCHOOL, 'Uknonwn') AS PLAYER_SCHOOL
    , COALESCE(COUNTRY, 'Uknonwn') AS PLAYER_COUNTRY
    , REPLACE(SPLIT(LAST_AFFILIATION, '/')[0], '"','') AS PLAYER_PREVIOUS_TEAM
    , COALESCE(REPLACE(SPLIT(LAST_AFFILIATION, '/')[1], '"',''), 'Unknown') AS PLAYER_PREVIOUS_TEAM_COUNTRY
    , CASE 
        WHEN HEIGHT IS NULL THEN NULL
        ELSE
        ROUND(CAST(SPLIT(HEIGHT, '-')[0] AS INTEGER) * 30.48 +
        CAST(SPLIT(HEIGHT, '-')[1] AS INTEGER) * 2.54, 1)
    END AS PLAYER_HEIGHT_IN_CM
    , CASE 
        WHEN WEIGHT IS NULL THEN NULL
        ELSE
        ROUND(CAST(WEIGHT AS INTEGER) * 0.45, 1)
    END AS PLAYER_WEIGHT_IN_KG
    , CAST(SEASON_EXP AS INTEGER) AS PLAYER_SEASON_EXPERIENCE
    , COALESCE(SPLIT(POSITION, '-')[0], 'Unknown') AS PLAYER_MAIN_POSITION
    , COALESCE(SPLIT(POSITION, '-')[1], 'Unknown') AS PLAYER_SECOND_POSITION
    , ROSTERSTATUS AS PLAYER_ROSTER_STATUS
    , INITCAP(COALESCE(TEAM_NAME, 'Unknown')) AS TEAM_NAME
    , UPPER(COALESCE(TEAM_ABBREVIATION, 'Unknown')) AS TEAM_ABBREVIATION
    , INITCAP(COALESCE(TEAM_CODE, 'Unknown')) AS TEAM_NICKNAME
    , INITCAP(COALESCE(TEAM_CITY, 'Unknown')) AS TEAM_CITY
    , CAST(FROM_YEAR AS NUMBER) AS TEAM_FOUND_YEAR
    , CAST(TO_YEAR AS NUMBER) AS TEAM_TILL_YEAR
    , DLEAGUE_FLAG AS PLAYED_IN_DLEAGUE
    , DRAFT_YEAR 
    , COALESCE(DRAFT_ROUND, 'Undrafted') AS DRAFT_ROUND
    , COALESCE(DRAFT_NUMBER, 'Undrafted') AS DRAFT_NUMBER
    , GREATEST_75_FLAG AS IS_GREATEST_75
    , CASE
        WHEN HEIGHT IS NULL THEN 0
        WHEN WEIGHT IS NULL THEN 0
        WHEN FROM_YEAR IS NULL THEN 0
        WHEN TO_YEAR IS NULL THEN 0
        ELSE 1
    END AS IS_VALID
    , TO_TIMESTAMP(CURRENT_TIMESTAMP ) AS LOAD_DATE
    , 'STAGING_NBA_DATA.STG_ALL_COMMON_PLAYER_INFO' AS SOURCE_TABLE
FROM NBA_DB.STAGING_NBA_DATA.STG_ALL_COMMON_PLAYER_INFO
order by draft_year;
--Dane do oczyszczenia, ale wyglądają bardzo fajnie. Mogą się przydać.
--Na pewno do ujednolicenia nazwy zawodników (nie potrzeba tak dużo detali). 
--Ważne dane: DISPLAY_FIRST_LAST, BIRTHDATE, SCHOOL, COUNTRY, LAST_AFFILIATION, HEIGHT, WEIGHT, SEASON_EXP, ROSTERSTATUS, TEAM_NAME, TEAM_ABREVIATION, TEAM_CITY, FROM_YEAR, TO_YEAR, DRAFT_YEAR, DRAFT_ROUND, DRAFT_NUMBER
--Dane bardziej detaliczne jednak jest ich mniej. Trzeba będzie połączyć z tabelą poniżej, tzn. STG_ALL_PLAYER_DETAILINFO, żeby mieć jak największą ilość graczy.

--STG_ALL_COMMON_PLAYER_INFO + 


SELECT 
     INITCAP(TRIM(FIRSTNAME)) AS PLAYER_FIRST_NAME
     , INITCAP(TRIM(LASTNAME)) AS PLAYER_LAST_NAME
     , CONCAT(FIRSTNAME, ' ', LASTNAME) AS PLAYER_FULL_NAME 
     , TO_DATE(BIRTHDATE) AS PLAYER_BIRTH_DATE
     , COALESCE(LASTATTENDED, 'Uknonwn') AS PLAYER_SCHOOL
     , COALESCE(REPLACE(DRAFT_YEAR, '-1.0' ,'Undrafted'), 'Undrafted') AS DRAFT_YEAR
     , COALESCE(REPLACE(DRAFT_ROUND, '-1.0' ,'Undrafted'), 'Undrafted') AS DRAFT_ROUND
     , COALESCE(REPLACE(DRAFT_NUMBER, '-1.0' ,'Undrafted'), 'Undrafted') AS DRAFT_NUMBER
     , 1 AS 'IS_VALID'
     , TO_TIMESTAMP(CURRENT_TIMESTAMP ) AS LOAD_DATE
    , 'STAGING_NBA_DATA.STG_ALL_PLAYER_DETAILINFO' AS SOURCE_TABLE
FROM NBA_DB.STAGING_NBA_DATA.STG_ALL_PLAYER_DETAILINFO;
--Tabela bardzo podobna do STG_ALL_COMMON_PLAYER_INFO. Zawiera mniej informacji.
--Rozpiętrość draftowa jest dość duża, ale trzeba sprawdzić czy są wszyscy.




WITH CTE AS (
SELECT 
    TO_DATE(DATE, 'DY, MON DD, YYYY') AS MATCH_DATE
    , REPLACE(SPLIT(DATE, ',')[0], '"','') AS DAY_MATCH_DATE
    , REPLACE("Start (ET)", 'p', '') AS START_DATE
    , "Home/Neutral" AS HOME_TEAM
    ,  PTS_HOME
    , "Visitor/Neutral" AS AWAY_TEAM
    , PTS_VISITOR AS PTS_AWAY
    , COALESCE("Unnamed: 7", 'NORMAL') AS END_OF_MATCH
    , CAST(REPLACE(ATTENDANCE, ',', '.') * 1000 AS NUMBER) AS MATCH_ATTENDANCE
    , INITCAP(ARENA) AS MATCH_ARENA
    , CASE
        WHEN NOTES IS NULL AND TO_DATE(DATE, 'DY, MON DD, YYYY') > '2025-04-18' THEN 'Play-Offs'
        WHEN NOTES IS NULL AND TO_DATE(DATE, 'DY, MON DD, YYYY') <= '2025-04-18' THEN 'Regular Season'
        ELSE NOTES
    END AS MATCH_TYPE
FROM NBA_DB.STAGING_NBA_DATA.STG_ALL_TEAM_ARENA_ATTENDANCE)

SELECT 
    TO_TIMESTAMP(CONCAT(MATCH_DATE, ' ', START_DATE)) AS MATCH_DATE_EST
    , CASE
        WHEN DAY_MATCH_DATE = 'Mon' THEN 'Monday'
        WHEN DAY_MATCH_DATE = 'Tue' THEN 'Tuesday'
        WHEN DAY_MATCH_DATE = 'Wed' THEN 'Wednesday'
        WHEN DAY_MATCH_DATE = 'Thu' THEN 'Thursday'
        WHEN DAY_MATCH_DATE = 'Fri' THEN 'Friday'
        WHEN DAY_MATCH_DATE = 'Sat' THEN 'Saturday'
        WHEN DAY_MATCH_DATE = 'Sun' THEN 'Sunday'
    END AS DAY_OF_MATCH_DATE
    , HOME_TEAM AS TEAM_NAME_HOME
    , PTS_HOME AS TEAM_PTS_HOME
    , AWAY_TEAM AS TEAM_NAME_AWAY
    , PTS_AWAY AS TEAM_PTS_AWAY
    , END_OF_MATCH AS MATCH_TYPE_OF_END
    , MATCH_ATTENDANCE
    , MATCH_ARENA 
    , MATCH_TYPE 
    , 1 AS IS_VALID
    , TO_TIMESTAMP(CURRENT_TIMESTAMP ) AS LOAD_DATE
    , 'STAGING_NBA_DATA.STG_ALL_TEAM_ARENA_ATTENDANCE' AS SOURCE_TABLE
FROM CTE;
--Dane odnośnie aren - zajebiście przydatne
-- Ważne kolumny: DATE, START, VISITOR, PTS_HOME, HOME, PTS_VISITOR, Unnamed:7, ATTENDANCE, ARENA, NOTES

DROP TABLE NBA_DB.STAGING_NBA_DATA.STG_ALL_TEAM_SCHEDULE;
-- USUNIĘCIE TABELI ZE WZGLĘDU NA POKRYWANIE DANYCH Z STG_ALL_TEAM_ARENA_ATTENDANCE JEDNAK BEZ INFORMACJI O ILOŚI KIBICÓW
-- Kalendarz na cały rok. Można spróbować nazwy zespołów po kluczach podstawowych, dołączyć te informacje do tabel głównych jako dodatek
-- Dane odnośnie meczów. Można pod to fajnie podpiąć godziny meczów itp.
-- Ważne kolumny: GAMEDATETIMEEST, ARENACITY, ARENANAME, GAMELABEL, GAMESUBTYPE, SERIESGAMENUMBER
-- Przykładowe ID zespołu : 1610612743

SELECT 
    TO_DATE(GAME_DATE_EST) AS MATCH_DATE
    , CASE
        WHEN TEAM_CITY_NAME_HOME = 'LA' THEN CONCAT('Los Angeles', ' ', TEAM_NICKNAME_HOME)
        ELSE CONCAT(TEAM_CITY_NAME_HOME, ' ', TEAM_NICKNAME_HOME)
    END AS TEAM_NAME_HOME
    , TEAM_ABBREVIATION_HOME
    , TEAM_NICKNAME_HOME
    , CASE
        WHEN TEAM_CITY_NAME_HOME = 'LA' THEN 'Los Angeles'
        ELSE TEAM_CITY_NAME_HOME
    END AS TEAM_CITY_HOME
    , CASE
        WHEN TEAM_CITY_NAME_AWAY = 'LA' THEN CONCAT('Los Angeles', ' ', TEAM_NICKNAME_AWAY)
        ELSE CONCAT(TEAM_CITY_NAME_AWAY, ' ', TEAM_NICKNAME_AWAY)
    END AS TEAM_NAME_AWAY
    , TEAM_ABBREVIATION_AWAY
    , TEAM_NICKNAME_AWAY    
    , CASE
        WHEN TEAM_CITY_NAME_AWAY = 'LA' THEN 'Los Angeles'
        ELSE TEAM_CITY_NAME_AWAY
    END AS TEAM_CITY_AWAY
    , CAST(PTS_QTR1_HOME AS NUMBER) AS TEAM_PTS_QTR1_HOME
    , CAST(PTS_QTR2_HOME AS NUMBER) AS TEAM_PTS_QTR2_HOME
    , CAST(PTS_QTR3_HOME AS NUMBER) AS TEAM_PTS_QTR3_HOME
    , CAST(PTS_QTR4_HOME AS NUMBER) AS TEAM_PTS_QTR4_HOME
    , CAST(PTS_OT1_HOME AS NUMBER) AS TEAM_PTS_OT1_HOME
    , CAST(PTS_OT2_HOME AS NUMBER) AS TEAM_PTS_OT2_HOME
    , CAST(PTS_OT3_HOME AS NUMBER) AS TEAM_PTS_OT3_HOME
    , CAST(PTS_OT4_HOME AS NUMBER) AS TEAM_PTS_OT4_HOME
    , CAST(PTS_OT5_HOME AS NUMBER) AS TEAM_PTS_OT5_HOME
    , CAST(PTS_QTR1_HOME + PTS_QTR2_HOME + PTS_QTR3_HOME + PTS_QTR4_HOME AS NUMBER) AS TEAM_REGULAR_TIME_PTS_HOME
    , CAST(PTS_HOME AS NUMBER) AS TEAM_PTS_HOME
    , CAST(PTS_QTR1_AWAY AS NUMBER) AS TEAM_PTS_QTR1_AWAY
    , CAST(PTS_QTR2_AWAY AS NUMBER) AS TEAM_PTS_QTR2_AWAY
    , CAST(PTS_QTR3_AWAY AS NUMBER) AS TEAM_PTS_QTR3_AWAY
    , CAST(PTS_QTR4_AWAY AS NUMBER) AS TEAM_PTS_QTR4_AWAY
    , CAST(PTS_OT1_AWAY AS NUMBER) AS TEAM_PTS_OT1_AWAY
    , CAST(PTS_OT2_AWAY AS NUMBER) AS TEAM_PTS_OT2_AWAY
    , CAST(PTS_OT3_AWAY AS NUMBER) AS TEAM_PTS_OT3_AWAY
    , CAST(PTS_OT4_AWAY AS NUMBER) AS TEAM_PTS_OT4_AWAY
    , CAST(PTS_OT5_AWAY AS NUMBER) AS TEAM_PTS_OT5_AWAY
    , CAST(PTS_QTR1_AWAY + PTS_QTR2_AWAY + PTS_QTR3_AWAY + PTS_QTR4_AWAY AS NUMBER) AS TEAM_REGULAR_TIME_PTS_AWAY
    , CAST(PTS_AWAY AS NUMBER) AS TEAM_PTS_AWAY
    , CASE 
        WHEN PTS_OT1_HOME IS NULL OR PTS_OT1_AWAY IS NULL OR PTS_OT1_HOME = 0 OR PTS_OT1_AWAY = 0  THEN 'Without OT'
        WHEN PTS_OT1_HOME IS NOT NULL OR PTS_OT1_AWAY IS NOT NULL OR PTS_OT1_HOME <> 0 OR PTS_OT1_AWAY <> 0 THEN 'OT'
    ELSE NULL
    END AS IS_OVERTIME
    , 1 AS IS_VALID
    , TO_TIMESTAMP(CURRENT_TIMESTAMP ) AS LOAD_DATE
    , 'STAGING_NBA_DATA.STG_ALL_TEAM_SCORELINE' AS SOURCE_TABLE
FROM NBA_DB.STAGING_NBA_DATA.STG_ALL_TEAM_SCORELINE;
-- Dane historyczne od 1947 roku łączące dane historyczne z sezonu regularnego i playoffs.
-- Dość dobre sane obejmujące zakres od 1466 do 2023 roku. 


SELECT
    SEASON
    , INITCAP(PLAYER_NAME) AS PLAYER_FULL_NAME
    , REPLACE(SPLIT(POSITION, '-')[0], '"', '') AS PLAYER_MAIN_POSITION
    , COALESCE(REPLACE(SPLIT(POSITION, '-')[1], '"', ''), 'None') AS PLAYER_SECOND_POSITION
    , ROUND(COALESCE(HEIGHT_W_SHOES, HEIGHT_WO_SHOES + 1.5) * 2.54,1) AS PLAYER_HEIGHT_IN_CM
    , WEIGHT AS PLAYER_WEIGHT
    , ROUND(WINGSPAN * 2.54,1) AS PLAYER_WINGSPAN_IN_CM
    , ROUND(STANDING_REACH * 2.54,1) AS PLAYER_STANDING_REACH_IN_CM
    , ROUND(BODY_FAT_PCT,1) AS PLAYER_BODY_FAT_PCT
    , ROUND(HAND_LENGTH * 2.54,1) AS PLAYER_HAND_LENGTH_IN_CM
    , ROUND(HAND_WIDTH * 2.54,1) AS PLAYER_HAND_WIDTH_IN_CM
    , ROUND(STANDING_VERTICAL_LEAP * 2.54,1) AS DRAFT_STANDING_VERTICAL_LEAP_IN_CM
    , ROUND(MAX_VERTICAL_LEAP * 2.54,1) AS DRAFT_MAX_VERTICAL_LEAP_IN_CM
    , LANE_AGILITY_TIME AS DRAFT_LANE_AGILITY_TIME
    , THREE_QUARTER_SPRINT AS DRAFT_THREE_QUARTER_SPRINT
    , CAST(BENCH_PRESS AS NUMBER) AS DRAFT_BENCH_PRESS_RESULT
    , ROUND((SPLIT(SPOT_FIFTEEN_CORNER_LEFT, '-')[0] + SPLIT(SPOT_FIFTEEN_BREAK_LEFT, '-')[0] + SPLIT(SPOT_FIFTEEN_TOP_KEY, '-')[0] + SPLIT(SPOT_FIFTEEN_BREAK_RIGHT, '-')[0] + SPLIT(SPOT_FIFTEEN_CORNER_RIGHT, '-')[0]) / 25, 1) AS DRAFT_SPOT_FIFTEEN_SUMMARY_PCT
    , ROUND((SPLIT(SPOT_COLLEGE_CORNER_LEFT, '-')[0] + SPLIT(SPOT_COLLEGE_BREAK_LEFT, '-')[0] + SPLIT(SPOT_COLLEGE_TOP_KEY, '-')[0] + SPLIT(SPOT_COLLEGE_BREAK_RIGHT, '-')[0] + SPLIT(SPOT_COLLEGE_CORNER_RIGHT, '-')[0]) / 25, 1) AS DRAFT_SPOT_COLLEGE_SUMMARY_PCT
    , ROUND((SPLIT(SPOT_NBA_CORNER_LEFT, '-')[0] + SPLIT(SPOT_NBA_BREAK_LEFT, '-')[0] + SPLIT(SPOT_NBA_TOP_KEY, '-')[0] + SPLIT(SPOT_NBA_BREAK_RIGHT, '-')[0] + SPLIT(SPOT_NBA_CORNER_RIGHT, '-')[0]) / 25, 1) AS DRAFT_SPOT_NBA_SUMMARY_PCT
    , ROUND((SPLIT(OFF_DRIB_FIFTEEN_BREAK_LEFT, '-')[0] + SPLIT(OFF_DRIB_FIFTEEN_TOP_KEY, '-')[0] + SPLIT(OFF_DRIB_FIFTEEN_BREAK_RIGHT, '-')[0]) / 15, 1) AS DRAFT_OFF_DRIB_FIFTEEN_SUMMARY_PCT
    , ROUND((SPLIT(OFF_DRIB_COLLEGE_BREAK_LEFT, '-')[0] + SPLIT(OFF_DRIB_COLLEGE_TOP_KEY, '-')[0] + SPLIT(OFF_DRIB_COLLEGE_BREAK_RIGHT, '-')[0]) / 15, 1) AS DRAFT_OFF_DRIB_COLLEGE_SUMMARY_PCT
    , CAST(REPLACE(SPLIT(ON_MOVE_FIFTEEN, '-')[0], '"', '') AS NUMBER) AS DRAFT_ON_MOVE_FIFTEEN_SHOT_MAD
    , CAST(REPLACE(SPLIT(ON_MOVE_FIFTEEN, '-')[1], '"', '') AS NUMBER) AS DRAFT_ON_MOVE_FIFTEEN_SHOT_ATT
    , CAST(REPLACE(SPLIT(ON_MOVE_FIFTEEN, '-')[0], '"', '') AS NUMBER) / CAST(REPLACE(SPLIT(ON_MOVE_FIFTEEN, '-')[1], '"', '') AS NUMBER) AS DRAFT_ON_MOVE_FIFTEEN_SUMMARY_PCT
    , CAST(REPLACE(SPLIT(ON_MOVE_COLLEGE, '-')[0], '"', '') AS NUMBER) AS DRAFT_ON_MOVE_COLLEGE_SHOT_MAD
    , CAST(REPLACE(SPLIT(ON_MOVE_COLLEGE, '-')[1], '"', '') AS NUMBER) AS DRAFT_ON_MOVE_COLLEGE_SHOT_ATT
    , CAST(REPLACE(SPLIT(ON_MOVE_COLLEGE, '-')[0], '"', '') AS NUMBER) / CAST(REPLACE(SPLIT(ON_MOVE_COLLEGE, '-')[1], '"', '') AS NUMBER) AS DRAFT_ON_MOVE_COLLEGE_SUMMARY_PCT
    , CASE
        WHEN REPLACE(SPLIT(POSITION, '-')[0], '"', '') IS NULL THEN 0
        ELSE 1
    END AS IS_VALID
    , TO_TIMESTAMP(CURRENT_TIMESTAMP ) AS LOAD_DATE
    , 'STAGING_NBA_DATA.STG_DRAFT_PLAYER_COMBINE_STATS' AS SOURCE_TABLE
FROM NBA_DB.STAGING_NBA_DATA.STG_DRAFT_PLAYER_COMBINE_STATS;
-- Dane rozszerzające informacje z draftu, ale w draft combine. 

WITH CTE AS (
SELECT
    *
    ,  ROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY SEASON DESC) AS RN
    FROM NBA_DB.STAGING_NBA_DATA.STG_DRAFT_PLAYER_HISTORY)

SELECT 
    PLAYER_NAME AS PLAYER_FULL_NAME
    , SEASON AS DRAFT_YEAR
    , ROUND_NUMBER
    , ROUND_PICK
    , OVERALL_PICK
    , DRAFT_TYPE
    , CONCAT(TEAM_CITY, ' ', TEAM_NAME) AS TEAM_NAME
    , TEAM_ABBREVIATION
    , TEAM_NAME AS TEAM_NICKNAME
    , TEAM_CITY
    , ORGANIZATION AS TEAM_ORGANIZTION
    , ORGANIZATION_TYPE AS TEAM_ORGANIZTION_TYPE
    , CASE 
        WHEN RN = 1 THEN TRUE
        WHEN RN > 1 THEN FALSE
        ELSE NULL
    END AS IS_VALID
    , TO_TIMESTAMP(CURRENT_TIMESTAMP ) AS LOAD_DATE
    , 'STAGING_NBA_DATA.STG_DRAFT_PLAYER_HISTORY' AS SOURCE_TABLE
FROM CTE;
-- Dane draftowe z większą liczbą danych, bo od 1947 roku.



SELECT 
    CONCAT(CITY, ' ', NICKNAME) AS TEAM_NAME
    , ABBREVIATION AS TEAM_ABBREVIATION
    , NICKNAME AS TEAM_NICKNAME
    , CITY AS TEAM_CITY
    , CAST(YEARFOUNDED AS NUMBER) AS TEAM_FOUND_YEAR
    , ARENA AS TEAM_ARENA_NAME
    , CAST(ARENACAPACITY AS NUMBER) AS TEAM_ARENA_CAPACITY
    , OWNER AS TEAM_OWNER_NAME
    , GENERALMANAGER AS TEAM_GENERAL_MANAGER_NAME
    , HEADCOACH AS TEAM_HEADCOACH_NAME
    , DLEAGUEAFFILIATION AS TEAM_DLEAGUE_AFFILIATION_NAME
    , 1 AS IS_VALID
    , TO_TIMESTAMP(CURRENT_TIMESTAMP ) AS LOAD_DATE
    , 'STAGING_NBA_DATA.STG_SEASON_TEAM_DETAILS' AS SOURCE_TABLE
FROM NBA_DB.STAGING_NBA_DATA.STG_SEASON_TEAM_DETAILS;
--Wartościowe dane: ArenaCapacity, Owner, GeneralManager, HeadCoach, DLeagueAffiliation, 

SELECT 
    GAMEDATE AS MATCH_DATE
    , CONCAT(HOMETEAMCITY, ' ', HOMETEAMNAME) AS TEAM_NAME_HOME
    , HOMETEAMNAME AS TEAM_NICKNAME_HOME
    , HOMETEAMCITY AS TEAM_CITY_HOME
    , CONCAT(AWAYTEAMCITY, ' ', AWAYTEAMNAME) AS TEAM_NAME_AWAY
    , AWAYTEAMNAME AS TEAM_NICKNAME_AWAY
    , AWAYTEAMCITY AS TEAM_CITY_AWAY
    , HOMESCORE AS TEAM_PTS_HOME
    , AWAYSCORE AS TEAM_PTS_AWAY
    , CASE
        WHEN HOMESCORE > AWAYSCORE THEN CONCAT(HOMETEAMCITY, ' ', HOMETEAMNAME)
        WHEN HOMESCORE < AWAYSCORE THEN CONCAT(AWAYTEAMCITY, ' ', AWAYTEAMNAME)
        ELSE NULL
    END AS MATCH_WINNER
    , GAMETYPE AS MATCH_TYPE
    , ATTENDANCE AS MATCH_ATTENDANCE
    , ARENAID AS ARENA_ID
    , GAMELABEL AS MATCH_LABEL
    , GAMESUBLABEL AS MATCH_SUBLABEL
    , 1 AS IS_VALID
    , TO_TIMESTAMP(CURRENT_TIMESTAMP ) AS LOAD_DATE
    , 'STAGING_NBA_DATA.STG_SEASON_TEAM_GAMES_ALL' AS SOURCE_TABLE
FROM NBA_DB.STAGING_NBA_DATA.STG_SEASON_TEAM_GAMES_ALL;
--Dane dodane w drugiej turze.
--Dane na poziomie zespołów, zawierają wszystkie mecze od 1946 do 2025 z podziałem na playffs i regular season.


SELECT 
    TEAM_ID
    , CONCAT(CITY, ' ', NICKNAME) AS TEAM_NAME
    , CITY AS TEAM_CITY
    , NICKNAME AS TEAM_NICKNAME
    , YEAR_FOUNDED AS TEAM_FOUND_YEAR
    , YEAR_ACTIVE_TILL AS TEAM_TILL_YEAR
    , 1 AS IS_VALID
    , TO_TIMESTAMP(CURRENT_TIMESTAMP ) AS LOAD_DATE
    , 'STAGING_NBA_DATA.STG_SEASON_TEAM_HISTORY' AS SOURCE_TABLE
FROM NBA_DB.STAGING_NBA_DATA.STG_SEASON_TEAM_HISTORY;
--WHERE TEAM_ID = '1610612743';
--Wartościowe dane:Dane historyczne, aktywne zespoły do 2019 roku, info o nieaktywnych.
--Tutaj trzeba będzie zaktualizować dane, jeśli tabela się przyda.


SELECT 
    ID AS TEAM_ID
    , FULL_NAME AS TEAM_NAME
    , ABBREVIATION AS TEAM_ABBREVIATION
    , NICKNAME AS TEAM_NICKNAME
    , CITY AS TEAM_CITY
    , STATE AS TEAM_STATE
    , CAST(YEAR_FOUNDED AS NUMBER) AS TEAM_FOUND_YEAR
    , 1 AS IS_VALID
    , TO_TIMESTAMP(CURRENT_TIMESTAMP ) AS LOAD_DATE
    , 'STAGING_NBA_DATA.STG_SEASON_TEAM_HISTORY' AS SOURCE_TABLE
FROM NBA_DB.STAGING_NBA_DATA.STG_SEASON_TEAM_NAMES;
--Dane dotyczące zespołów. Zawiera podstawowe informacje oraz rok założenia.
--Wartościowe dane: CITY, STATE, YEAR_FOUNDED


SELECT 
    REPLACE(TEAM, '*', '') AS TEAM_NAME
    , G AS TEAM_GAMES_PLAYED
    , MP AS TEAM_MINUTES_PLAYED
    , FG AS TEAM_FG_MADE
    , FGA AS TEAM_FG_ATTEMPTED
    , "FG%" AS TEAM_FG_PCT
    , "3PTM" AS "TEAM_3PT_MADE"
    , "3PTA" AS "TEAM_3PT_ATTEMPTED"
    , "3P%" AS "TEAM_3PT_PCT"
    , "2PTM" AS "TEAM_2PT_MADE"
    , "2PTA" AS "TEAM_2PT_ATTEMPTED"
    , "2P%" AS "TEAM_2PT_PCT"
    , FT AS TEAM_FT_MADE
    , FTA AS TEAM_FT_ATTEMPTED
    , "FT%" AS TEAM_FT_PCT
    , ORB AS TEAM_OFF_REB
    , DRB AS TEAM_DEF_REB
    , TRB AS TEAM_TOTAL_REB
    , AST AS TEAM_ASSISTS
    , STL AS TEAM_STEALS
    , BLK AS TEAM_BLOCKS
    , TOV AS TEAM_TURNOVERS
    , PF AS TEAM_PERSONAL_FOULS
    , PTS AS TEAM_PTS
    , 1 AS 'IS_VALID'
    , TO_TIMESTAMP(CURRENT_TIMESTAMP ) AS LOAD_DATE
    , 'STAGING_NBA_DATA.STG_SEASON_TEAM_SUMMARY2425' AS SOURCE_TABLE
FROM NBA_DB.STAGING_NBA_DATA.STG_SEASON_TEAM_SUMMARY2425;
--Sumaryczne statystyki na sezon 24-25 z basketball reference. Jako dodatek

/*
Zakres zawodnicy - draft
NBA_DB.STAGING_NBA_DATA.STG_DRAFT_PLAYER_HISTORY - główna tabela draftowa
NBA_DB.STAGING_NBA_DATA.STG_DRAFT_PLAYER_STATS - dodatkowa tabela dostarczająca dane numeryczne dla graczy 1990-2021
NBA_DB.STAGING_NBA_DATA.STG_DRAFT_PLAYER_COMBINE_STATS - dodatkowa tabela z draft combine od 2001 roku do 2023


--Zakres zawodnicy
NBA_DB.STAGING_NBA_DATA.STG_ALL_COMMON_PLAYER_INFO + NBA_DB.STAGING_NBA_DATA.STG_ALL_PLAYER_DETAILINFO -> połączenie
STG_ALL_PLAYER_DETAILINFO mniej informacji, ale większy zakres
NBA_DB.STAGING_NBA_DATA.STG_PLAYOFFS_PLAYER_STATS + NBA_DB.STAGING_NBA_DATA.STG_SEASON_PLAYER_STATS - UNION, dane na poziomie meczu

--Zakres zespoły
NBA_DB.STAGING_NBA_DATA.STG_ALL_TEAM_SCORELINE - Na ten moment główna tabela dla zawodników
NBA_DB.STAGING_NBA_DATA.STG_SEASON_TEAM_GAMES_ALL - Możliwe, że też główna tabela -> DO ROZSTRYGNIĘCIA
NBA_DB.STAGING_NBA_DATA.STG_SEASON_TEAM_STATS + NBA_DB.STAGING_NBA_DATA.STG_PLAYOFFS_TEAM_STATS - Też może być główna, jest w CLEANSE
NBA_DB.STAGING_NBA_DATA.STG_ALL_TEAM_ARENA_ATTENDANCE - dodatkowa tabela z arenami
STG_ALL_TEAM_SCHEDULE - dodatkowa tabela, do dodania, ID przykładowego zespołu 1610612743 (można dołączyć nazwy z STG_ALL_TEAM_SCORELINE)
NBA_DB.STAGING_NBA_DATA.STG_SEASON_TEAM_DETAILS - dodatkowa tabela ze szczegółami 
NBA_DB.STAGING_NBA_DATA.STG_SEASON_TEAM_HISTORY - dodatkowa tabela (JEŚLI POTRZEBNA). Zawiera zakresy aktualności.
NBA_DB.STAGING_NBA_DATA.STG_SEASON_TEAM_NAMES - dodatkowa tabela, wyciągnąć state
NBA_DB.STAGING_NBA_DATA.STG_SEASON_TEAM_SUMMARY2425 - dodatkowa tabela z BBal reference z sumarycznymi statami
*/

--Wyciągnąć dane z 2024-25 sezonu dla zawodników na poziomie np. średnich.